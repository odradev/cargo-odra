//! Module containing code that parses CLI input.

use std::env;

use clap::{CommandFactory, Parser, Subcommand};

use crate::{
    actions::{
        build::BuildAction,
        clean::clean_action,
        generate::GenerateAction,
        init::InitAction,
        schema::SchemaAction,
        test::TestAction,
    },
    consts,
    errors::Error,
    project::Project,
};

#[derive(Parser)]
#[clap(name = "cargo")]
#[clap(bin_name = "cargo")]
/// Main command `cargo`.
pub enum Cargo {
    Odra(Odra),
}

#[derive(clap::Args)]
#[clap(author, version, about, long_about = None)]
/// `cargo odra`
pub struct Odra {
    #[clap(subcommand)]
    subcommand: OdraSubcommand,

    #[clap(value_parser, long, short, global = true)]
    /// Be verbose.
    pub verbose: bool,

    #[clap(value_parser, long, short, global = true)]
    /// Be quiet, show only errors.
    pub quiet: bool,
}

#[derive(Subcommand)]
/// Subcommands of `cargo odra`.
pub enum OdraSubcommand {
    /// Creates a new Odra project.
    New(InitCommand),
    /// Initializes a new Odra project in an existing, empty directory.
    Init(InitCommand),
    /// Builds the project, including backend and producing wasm files.
    Build(BuildCommand),
    /// Generates schema for a given contract.
    Schema(SchemaCommand),
    /// Runs test. Without the backend parameter, the tests will be run against Mock VM.
    Test(TestCommand),
    /// Generates boilerplate code for contracts.
    Generate(GenerateCommand),
    /// Cleans all temporary data generated by cargo odra.
    Clean(CleanCommand),
    /// Generates completions for given shell
    Completions {
        /// The shell to generate the completions for
        #[arg(value_enum)]
        shell: clap_complete_command::Shell,
    },
}

#[derive(clap::Args)]
/// `cargo odra init`
pub struct InitCommand {
    /// Name which will be used as a name for the crate.
    #[clap(value_parser, long, short)]
    pub name: String,
    /// URI of the repository containing the template.
    #[clap(value_parser, long, short, default_value = consts::ODRA_TEMPLATE_GH_REPO)]
    pub repo_uri: String,
    /// Odra source to use. By default, it uses latest release of Odra.
    /// It can be a version, a branch, commit hash or a location on the filesystem.
    #[clap(value_parser, long, short)]
    pub source: Option<String>,
    /// Template to use. Default is "full", which contains a sample contract and a test.
    /// To see all available templates, run `cargo odra new --list`.
    #[clap(value_parser, long, short, default_value = consts::ODRA_TEMPLATE_DEFAULT_TEMPLATE)]
    pub template: String,
}

#[derive(clap::Args)]
/// `cargo odra build`
pub struct BuildCommand {
    /// Contracts names separated by a space that matches the names in Odra.toml.
    #[clap(value_parser, long, short)]
    pub contracts_names: Option<String>,
}

#[derive(clap::Args)]
/// `cargo odra schema`
pub struct SchemaCommand {
    /// Contracts names separated by a space that matches the names in Odra.toml.
    #[clap(value_parser, long, short)]
    pub contracts_names: Option<String>,
}

#[derive(clap::Args, Debug)]
/// `cargo odra test`
pub struct TestCommand {
    /// If set, runs tests against a backend VM with the given name (e.g. casper).
    #[clap(value_parser, long, short, value_parser = [consts::ODRA_CASPER_BACKEND])]
    pub backend: Option<String>,
    /// A list of arguments is passed to the cargo test command.
    #[clap(raw = true)]
    pub args: Vec<String>,
    /// Skip building wasm files.
    #[clap(value_parser, long, short, default_value = "false")]
    pub skip_build: bool,
}

#[derive(clap::Args, Debug)]
/// `cargo odra generate`
pub struct GenerateCommand {
    /// Name of the contract to be created.
    #[clap(value_parser, long, short)]
    pub contract_name: String,
    /// Name of the module in which the contract will be created.
    #[clap(value_parser, long, short)]
    pub module: Option<String>,
}

#[derive(clap::Args, Debug)]
/// `cargo odra clean`
pub struct CleanCommand {}

#[derive(clap::Args, Debug)]
/// `cargo odra update`
pub struct UpdateCommand {
    /// If set, runs cargo update for the given builder instead of everyone.
    #[clap(value_parser, long, short, value_parser = [consts::ODRA_CASPER_BACKEND])]
    pub backend: Option<String>,
}

/// Cargo odra main parser function.
pub fn make_action() {
    let Cargo::Odra(args) = Cargo::parse();
    let current_dir = env::current_dir()
        .unwrap_or_else(|_| Error::CouldNotDetermineCurrentDirectory.print_and_die());
    match args.subcommand {
        OdraSubcommand::Build(build) => {
            let project = Project::detect(current_dir);
            BuildAction::new(&project, build.contracts_names).build();
        }
        OdraSubcommand::Test(test) => {
            let project = Project::detect(current_dir);
            TestAction::new(&project, test.backend, test.args, test.skip_build).test();
        }
        OdraSubcommand::Generate(generate) => {
            let project = Project::detect(current_dir);
            GenerateAction::new(&project, generate.contract_name, generate.module)
                .generate_contract();
        }
        OdraSubcommand::New(init) => {
            InitAction::generate_project(init, current_dir, false);
        }
        OdraSubcommand::Init(init) => {
            InitAction::generate_project(init, current_dir, true);
        }
        OdraSubcommand::Clean(_) => {
            let project = Project::detect(current_dir);
            clean_action(&project);
        }
        OdraSubcommand::Completions { shell } => {
            shell.generate(&mut Cargo::command(), &mut std::io::stdout());
        }
        OdraSubcommand::Schema(schema) => {
            let project = Project::detect(current_dir);
            SchemaAction::new(&project, schema.contracts_names).build();
        }
    }
}
